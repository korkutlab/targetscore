% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_fs_vals.R
\name{get_fs_vals}
\alias{get_fs_vals}
\title{Extracted functional score value from COMIC database; this can be overriden with manually curated scores}
\usage{
get_fs_vals(
  n_prot,
  proteomic_responses,
  mab_to_genes,
  fs_override = NULL,
  cancer_role_file = system.file("extdata", "cancer_gene_census_v95.txt", package =
    "targetscore"),
  verbose = FALSE
)
}
\arguments{
\item{n_prot}{Antibody number of input data.}

\item{proteomic_responses}{Input drug perturbation data. With columns as antibody, rows as samples.}

\item{mab_to_genes}{A list of antibodies, their associated genes, modification sites and effect.}

\item{fs_override}{a listing of functional scores for each gene manually set up
for overriding COSMIC Database given value, the modification path. (.txt)}

\item{cancer_role_file}{File with at two least columns: "Gene.Symbol" and 
"Role.in.Cancer" where the "Role.in.Cancer" has mainly values "TSG" 
(tumor suppressor gene) or "oncogene"; "TSG, fusion" and "oncogene, fusion" 
are also understood. Other values (e.g., "TSG, oncogene", "NA", or blank) 
will be interpreted as dual or unknown as part of the functional score. 
One source for this is the COSMIC 
Cancer Gene Census: https://cancer.sanger.ac.uk/cosmic/download}

\item{verbose}{Default as FALSE. If given TRUE, will print out the gene seq mapped with antibody map file.}
}
\value{
* "fs_final" dataframe with two coloumns: prot as antibody label; fs as functional #' score
}
\description{
Extracted functional score value from COMIC database; this can be overriden with manually curated scores
}
\examples{
# Read fs_manually set file
fs_override_org <- readRDS(system.file("test_data_files", "fs_value_file.rds",
package = "targetscore"
))

# Read proteomic responce file
file <- system.file("test_data", "BT474.csv", package = "targetscore")
proteomic_responses <- read.csv(file, row.names = 1)

# Read antibody file
file <- system.file("target_score_data", "antibody_map.csv", package = "targetscore")
mab_to_genes <- read.csv(file,
header = TRUE,
stringsAsFactors = FALSE
)

fs <- get_fs_vals(
n_prot = ncol(proteomic_responses), proteomic_responses = proteomic_responses,
mab_to_genes = mab_to_genes, fs_override = fs_override_org
)

}
\concept{targetscore}
