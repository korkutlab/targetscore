% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_target_score.R
\name{get_target_score}
\alias{get_target_score}
\title{Get Target Score Value Significance}
\usage{
get_target_score(
  wk,
  wks,
  dist_ind,
  edgelist,
  n_dose,
  n_prot,
  proteomic_responses,
  n_perm,
  verbose = TRUE,
  ts_factor = 1,
  fs_dat
)
}
\arguments{
\item{wk}{inference network constructed in matrix form with edge strength value estimated.
Can be extracted directly from predict_bio_network,predict_dat_network or predictt_hyb_network
function. Where predict_bio_network edge value default at 1 for upregulate and -1 for down regulate.}

\item{wks}{inference network constructed in matrix form with edge strength value estimated.
Can be extracted directly from predict_bio_network,predict_dat_network or predictt_hyb_network
function. Where predict_bio_network edge value default at 1 for upregulate, -1 for down regulate,
2 for phosphorylation and -2 for dephosphorylation.}

\item{dist_ind}{i distance file of edgelist with a third column as the network distance
between the genes in the interaction}

\item{edgelist}{edgelist of inferred network.}

\item{n_dose}{dose number of input data.}

\item{n_prot}{antibody number of input data.}

\item{proteomic_responses}{input drug perturbation data. With columns as antibody, rows as samples.}

\item{n_perm}{number of random TS calculations for building the null distribution}

\item{verbose}{a flag for debugging output}

\item{ts_factor}{a scaling factor for the pathway component of the target score}

\item{fs_dat}{a dataset with the functional score data.First coloumn as the protein name and second
column as the functional score. Can be inferred from get_fs_value or be User defined and curated.}
}
\value{
a list is returned with the following entries:
{ts}{TargetScore values summed over individual drug doses}
{tsd}{TargetScore values for individual drug doses}
{wk}{Inferred network matrix form with edge strength value estimated as the partial correlation}
{wks}{Inferred network matrix form with edge strength value estimated as the partial correlation}
{pts}{Unadjusted p-values calculated for using permutation testing where proteomic responses for each row have been randomized}
{q}{Q-values (derived from FDR adjusted p-values) calculated for using permutation testing where proteomic responses for each row have been randomized}
{rand_ts}{TargetScores for each randomized permutation}
}
\description{
Get Target Score Value Significance
}
\details{
data: multiple dose single drug perturbation
ts: integral_dose(fs*(xi+sigma_j(2^p*xj*product_k(wk))))
to be converted to integral_dose(fs*((xi/(stdev_xi)+sigma_j(2^p*((xj/stdev_xj)*product_k(wk))))
missing: For phosp and dephosp based wk, there is no 'exact match' between known and measured phospho-sites
}
\examples{
# read proteomic response file
signaling_responses <- read.csv(system.file("test_data", "TCGA-BRCA-L4.csv",
package = "targetscore"
), row.names = 1)

# Read in biology knowledge base protein interaction
network <- readRDS(system.file("test_data_files", "predict_bio_network_network_output.rds",
package = "targetscore"
))

# read proteomic responce file
proteomic_responses <- read.csv(system.file("test_data", "BT474.csv", package = "targetscore"),
row.names = 1
)

# read functional score value
fs <- readRDS(system.file("test_data_files", "get_fs_vals_output.rds",
package = "targetscore"
))

# Calculate Target Score
ts <- array(0, dim = c(dim(proteomic_responses)[1], dim(proteomic_responses)[2]))
ts_p <- array(0, dim = c(dim(proteomic_responses)[1], dim(proteomic_responses)[2]))
ts_q <- array(0, dim = c(dim(proteomic_responses)[1], dim(proteomic_responses)[2]))
for (i in seq_len(2)) {
results <- targetscore::get_target_score(
  wk = network$wk,
  wks = network$wks,
  dist_ind = network$dist_ind,
  edgelist = network$edgelist,
  n_dose = 1,
  n_prot = dim(proteomic_responses)[2],
  proteomic_responses = proteomic_responses[i,],
  n_perm = 1,
  verbose = FALSE,
  fs_dat = fs
)
ts[i,] <- results$ts
ts_p[i,] <- results$pts
ts_q[i,] <- results$q
} 
colnames(ts) <- colnames(proteomic_responses)
ts <- data.frame(rownames(proteomic_responses), ts)
colnames(ts_p) <- colnames(proteomic_responses)
ts_p <- data.frame(rownames(proteomic_responses), ts_p)
colnames(ts_q) <- colnames(proteomic_responses)
ts_q <- data.frame(rownames(proteomic_responses), ts_q)
ts_result <- list(ts = ts, ts_p = ts_p, ts_q = ts_q)

}
\concept{targetscore}
